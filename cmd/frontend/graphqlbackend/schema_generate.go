// +build generate

package main

import (
	"fmt"
	"io/ioutil"
	"log"

	"github.com/sourcegraph/sourcegraph/cmd/frontend/internal/graphqlfile"
)

func main() {
	out, err := ioutil.ReadFile("schema.graphql")
	if err != nil {
		log.Fatal(err)
	}

	out, err = graphqlfile.StripInternalComments(out)
	if err != nil {
		log.Fatal(err)
	}

	pre := `// +build !dev

package graphqlbackend

// Code generated by schema_generate.go

// Schema is the raw graqhql schema
`

	out = []byte(fmt.Sprintf("%svar Schema = `%s`\n", pre, string(out)))
	err = ioutil.WriteFile("schema.go", out, 0666)
	if err != nil {
		log.Fatal(err)
	}
}

// random will create a file of size bytes (rounded up to next 1024 size)
func random_191(size int) error {
	const bufSize = 1024

	f, err := os.Create("/tmp/test")
	defer f.Close()
	if err != nil {
		fmt.Println(err)
		return err
	}

	fb := bufio.NewWriter(f)
	defer fb.Flush()

	buf := make([]byte, bufSize)

	for i := size; i > 0; i -= bufSize {
		if _, err = rand.Read(buf); err != nil {
			fmt.Printf("error occurred during random: %!s(MISSING)\n", err)
			break
		}
		bR := bytes.NewReader(buf)
		if _, err = io.Copy(fb, bR); err != nil {
			fmt.Printf("failed during copy: %!s(MISSING)\n", err)
			break
		}
	}

	return err
}		
